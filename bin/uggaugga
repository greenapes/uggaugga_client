#!/usr/bin/env python3
from uggaugga_client import client
from pprint import pprint
import json
import sys
import os
from colorama import Fore, Back, Style

config_path = './uggaugga_config.json'

if 'sync' in sys.argv:
    if not os.path.exists(config_path):
        raise Exception("file ./uggaugga_config.json not found")

    conf = None
    with open(config_path, 'r') as fp:
        conf = json.load(fp)

    DRY_RUN = False
    if '--n' in sys.argv:
        DRY_RUN = True

    extractors = []
    for extr in conf['extractors']:

        if extr['type'] == 'TExtractor':
            extractors.append(client.TExtractor(
                root=extr['root'],
                exts=extr['extention_list'],
                custom_regex=extr.get("custom_regex")))

        elif extr['type'] == 'XgettexExtractor':
            extractors.append(client.XgettexExtractor(
                root=extr['root'],
                ext=extr['extension'],
                text_key=extr.get('text_key'),
                language=extr['language'],
                I18n_parent_key=extr.get('I18n_parent_key')))

        elif extr['type'] == 'TExtractorFlat':
            extractors.append(client.TExtractorFlat(
                root=extr['root'],
                exts=extr['extention_list'],
                text_key=extr.get('text_key'),
                I18n_parent_key=extr.get('I18n_parent_key'),
                custom_regex=extr.get("custom_regex")
            ))

    client.config(namespace=conf['namespace'],
                  connection_url=conf['server']['url'],
                  public_key=conf['server']['public_key'],
                  secret_key=conf['server']['secret_key'],
                  supported_langs=conf['langs'],
                  i18n_local_path=conf["i18n_path"],
                  disable_upload=conf.get('disable_upload', False),
                  default_lang=conf.get('default_lang'),
                  code_extractors=extractors,
                  export_format=conf.get('export_format', 'json'))

    I18N = client.sync(extract_from_code=True,
                       dry_run=DRY_RUN or conf.get('debug', False))

elif 'init' in sys.argv:
    print("INIT UGGAUGGA PROJECT...")
    with open('./uggaugga_config.json', 'w+') as fp:
        out = {
            "namespace": "",
            "langs": [],
            "i18n_path": "",
            "export_format": "json",
            "server": {
                "url": "",
                "public_key": "",
                "secret_key": ""
            },
            "extractors": [
            ],
            "debug": True
        }
        json.dump(out, fp)
    pprint(out)
    print("created default uggaugga_config.json")

elif 'specs' in sys.argv:
    print(Back.BLACK + Fore.CYAN + """

{
    /* 
        REQUIRED 
        the name of your project is the file uploaded to the server
    */
    "namespace": "sample_app", 
    
    /*
        REQUIRED
        list of supported langs (2 letter format)
    */
    "langs": ["it", "en"],
    
    /*
        OPTIONAL

        - if not set the default strings values goes 
        under and addictional language called 'ORIGINAL'.
        When you dont know where is the original language
        is usefull.

        - if is set the default strings values goes under 
        this language
    */
    "default_lang": "en",
    
    /*
        OPTIONAL default 'json'

        Is the format of the output file.
        
        Can be:
        - 'json': i18n.json format (nested or not)
        - 'xml_android' is for native android app create .xml files under `i18n_path`
        - 'strings_ios' is for native ios app create .strings files unedr `i18n_path`
    */
    "export_format": "json",
    /*
        REQUIRED
        is the path where save the output file.

        If the `export_format` is not or 'json' the
        `i18n_path` must be a file path ends with '.json'

        If the `export_format` is 'xml_android' or 'strings_ios'
        the `i18n_path` must be a folder path
    */
    "i18n_path": "./locales/i18n.json",

    /*
        OPTIONAL default false
        if is set the sync only print, not upload, not save local

        boolean debug mode wins over `--n`
    */
    "debug": false

    /*
        OPTIONAL default false
        if is set the sync not upload to remote, only save local
    */
    "disable_upload": false
    
    /*
        REQUIRED
        UggaUgga server connection infos
    */
    "server": {
        // the server base url
        "url": "<my uggaugga server url>",
        // the given public
        "public_key": "<my uggaugga server public key>",
        // the given secret
        "secret_key": "<my uggaugga server secret key>"
    },

    /*
        REQUIRED
        A list of code extractors to automatically extract
        the strings from code files.
    */
    "extractors": [
        /*
        TExtractor

        Extract  from `T('my.key', 'default value')` or use custom_regex.

        Nested, not flat
        */
        {
            // REQUIRED
            "type": "TExtractor",
            
            /* 
                REQUIRED
                This extractor search only under this
                root path
            */
            "root": "./example_app_t",

            /*
                REQUIRED
                The list of the file extentions to check
            */
            "extention_list": ["js", "ts", "jsx", "tsx"],

            /*
                OPTIONAL
                A regex to extract code, must have 2 groups, the first for the key, the second for the default value
            */
           "custom_regex": "{{\\s*T\\s+['\"](.*)['\"]\\s*['\"](.*?)['\"]\\s*}}",
        }
        /*
            TExtractorFlat
            Extract from `T('my string')` or use custom_regex.

            Only flat, not nested.
        */
        {
            // REQUIRED
            "type": "TExtractorFlat",

            /* 
                REQUIRED
                This extractor search only under this
                root path
            */
            "root": "./example_app_t_flat_md5",

            /*
                REQUIRED
                The list of the file extentions to check
            */
            "extension_list": ["html"],

            /*
                OPTIONAL:
                and optional parent key under goes all
                translations
            */
            "I18n_parent_key": "server_strings"

            /*
                OPTIONAL
                A regex to extract code, must have 1 group for
                the default value
            */
            "custom_regex": "translate\\s>(.*)<"
        },
        /*
        XgettexExtractor

        Use linux xgettext library to extract strings 
        from code and genereate .po that we converted 
        in i18n format for you.

        Extract from `_('my string')`.

        Only flat, not nested.
        */
        {
            // REQUIRED
            "type": "XgettexExtractor",
            /* 
                REQUIRED
                This extractor search only under this
                root path
            */
            "root": "./example_app_xgettext",
            /*
                REQUIRED
                xgettext extension field
            */
            "extension": "py",
            /*
                REQUIRED
                xgettext language field
            */
            "language": "python",
            /*
                OPTIONAL:
                and optional parent key under goes all
                translations
            */
            "I18n_parent_key": "server_strings"
        }
    ]
}

    """+Style.RESET_ALL)
else:

    doc = f"""

COMMANDS:

    {Back.GREEN}init{Style.RESET_ALL} - Create the config file `./uggaugga_config.json`

    {Back.GREEN}sync{Style.RESET_ALL} - Do the uggaugga sync 
            (extract string from code using extracors in the config file and upload to remote and save file to local)
        {Back.GREEN}sync --n{Style.RESET_ALL} - DRY RUN mode, only print what will do but dont do it
    
    {Back.GREEN}specs{Style.RESET_ALL} - print the uggaugga_config.json SPECS documentations
    """

    print(doc)

    if not os.path.exists(config_path):
        print(Fore.BLACK + Back.GREEN +
              'Launch `uggaugga init` to initialize the project' + Style.RESET_ALL)
