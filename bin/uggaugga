#!/usr/bin/env python3
from uggaugga_client import client
from pprint import pprint
import json
import sys
import os
from colorama import Fore, Back, Style

config_path = './uggaugga_config.json'

if 'sync' in sys.argv:
    if not os.path.exists(config_path):
        raise Exception("file ./uggaugga_config.json not found")

    conf = None
    with open(config_path, 'r') as fp:
        conf = json.load(fp)

    DRY_RUN = False
    if '--n' in sys.argv:
        DRY_RUN = True

    extractors = []
    for extr in conf['extractors']:

        if extr['type'] == 'TExtractor':
            extractors.append(client.TExtractor(
                root=extr['root'],
                exts=extr['extention_list'],
                custom_regex=extr.get("custom_regex")))

        elif extr['type'] == 'XgettexExtractor':
            extractors.append(client.XgettexExtractor(
                root=extr['root'],
                ext=extr['extension'],
                language=extr['language'],
                I18n_parent_key=extr.get('I18n_parent_key')))

        elif extr['type'] == 'TExtractorFlat':
            extractors.append(client.TExtractorFlat(
                root=extr['root'],
                exts=extr['extention_list'],
                text_key=extr.get('text_key'),
                I18n_parent_key=extr.get('I18n_parent_key'),
                custom_regex=extr.get("custom_regex")
            ))

    client.config(namespace=conf['namespace'],
                  connection_url=conf['server']['url'],
                  public_key=conf['server']['public_key'],
                  secret_key=conf['server']['secret_key'],
                  supported_langs=conf['langs'],
                  i18n_local_path=conf["i18n_path"],
                  disable_upload=conf.get('disable_upload', False),
                  default_lang=conf.get('default_lang'),
                  code_extractors=extractors,
                  export_format=conf.get('export_format', 'json'))

    I18N = client.sync(extract_from_code=True,
                       dry_run=DRY_RUN or conf.get('debug', False))

elif 'init' in sys.argv:
    print("INIT UGGAUGGA PROJECT...")
    with open('./uggaugga_config.json', 'w+') as fp:
        out = {
            "namespace": "",
            "langs": [],
            "i18n_path": "",
            "export_format": "json",
            "server": {
                "url": "",
                "public_key": "",
                "secret_key": ""
            },
            "extractors": [
            ],
            "debug": True
        }
        json.dump(out, fp)
    pprint(out)
    print("created default uggaugga_config.json")

else:

    doc = f"""

COMMANDS:

    {Back.GREEN}init{Style.RESET_ALL} - Create the config file `./uggaugga_config.json`

    {Back.GREEN}sync{Style.RESET_ALL} - Do the uggaugga sync 
            (extract string from code using extracors in the config file and upload to remote and save file to local)
        {Back.GREEN}sync --n{Style.RESET_ALL} - DRY RUN mode, only print what will do but dont do it
    """
    
    print(doc)
    
    if not os.path.exists(config_path):
        print(Fore.BLACK + Back.GREEN + 'Launch `uggaugga init` to initialize the project' + Style.RESET_ALL)